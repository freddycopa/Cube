#version 460 core

layout (location = 0) in vec3 quadVec;
layout (location = 1) in vec2 uv;
layout (location = 2) in vec3 position;
layout (location = 3) in vec3 axis;
layout (location = 4) in float sine;
layout (location = 5) in float cosine;
layout (location = 6) in vec3 location;
layout (location = 7) in float color;

out vec3 colour;
out vec2 texCoords;
out vec3 locFragment;
out vec4 pos;

uniform mat4 rotation;
uniform mat4 projection;
uniform vec3 sideToBeRotated = vec3(0, 0, 0);
uniform vec3 translation;
uniform mat4 sideRotation = mat4(1.0);

uniform vec3 colors[12] = {  
    vec3(0, 1, 0),
	vec3(1, 1, 0),
	vec3(1, 0, 0),
	vec3(0, 0, 1),
	vec3(1, 1, 1),
	vec3(1, 0.5, 0),
    vec3(0, 0.5, 0),
	vec3(0.5, 0.5, 0),
	vec3(0.5, 0, 0),
	vec3(0, 0, 0.5),
	vec3(0.5, 0.5, 0.5),
	vec3(0.5, 0.25, 0),
};

mat4 sideRotations[3] = {
	mat4(1),
	mat4(1),
	sideRotation
};

void main() {
	vec3 p = axis * dot(quadVec, axis) / dot(axis, axis);
	vec3 m = quadVec - p;
	vec3 n = cross(axis, m) / length(axis);
	vec3 r = (cosine * m) + (sine * n) + p;
	int index = int(sign(dot(normalize(sideToBeRotated), normalize(position /*+ r*/)))) + 1;
	vec4 v = (rotation * sideRotations[index] * vec4(position + r, 1)) + vec4(translation, 0);
	gl_Position = projection * v; 
	colour = colors[int(color)];
	texCoords = uv;
	locFragment = location;
	//pos = rotation * sideRotations[index] * vec4(position, 1);
	pos = rotation * sideRotations[index] * vec4(position /*+ r*/, 1);
}
